Index: load.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import geopandas as gpd\r\nimport numpy as np\r\n\r\nfrom PyQt6.QtGui import *\r\nfrom PyQt6.QtCore import *\r\nfrom PyQt6.QtWidgets import *\r\n\r\nclass Load:\r\n\r\n    def __init__(self):\r\n        pass\r\n\r\n    polygony = []\r\n\r\n    def readPol(self, path):\r\n        data = gpd.read_file(path)\r\n\r\n        for p in range(data.shape[0]):\r\n            g = [i for i in data.geometry]\r\n            pol = list(g[p].boundary.coords.xy)\r\n            #print(pol)\r\n\r\n            polygon = []\r\n            for i in range(len(pol[0])):\r\n                polygon.append(QPointF(pol[0][i], pol[1][i]))\r\n                #print(i)\r\n\r\n            self.polygony.append(polygon)\r\n\r\n\r\n\r\n\r\n    def xy(self, p):\r\n\r\n        return self.polygony[p]\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/load.py b/load.py
--- a/load.py	(revision d8c849ba6a780478c75ca2c3be30430d4acb3d03)
+++ b/load.py	(date 1678564347829)
@@ -18,18 +18,13 @@
         for p in range(data.shape[0]):
             g = [i for i in data.geometry]
             pol = list(g[p].boundary.coords.xy)
-            #print(pol)
 
             polygon = []
             for i in range(len(pol[0])):
                 polygon.append(QPointF(pol[0][i], pol[1][i]))
-                #print(i)
 
             self.polygony.append(polygon)
 
-
-
-
     def xy(self, p):
 
         return self.polygony[p]
Index: mainform.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Form implementation generated from reading ui file 'form.ui'\r\n#\r\n# Created by: PyQt6 UI code generator 6.2.3\r\n#\r\n# WARNING: Any manual changes made to this file will be lost when pyuic6 is\r\n# run again.  Do not edit this file unless you know what you are doing.\r\n\r\n\r\nfrom PyQt6 import QtCore, QtGui, QtWidgets\r\nfrom draw import Draw\r\nfrom algorithms import *\r\n\r\nclass Ui_MainForm(object):\r\n    def setupUi(self, MainForm):\r\n        MainForm.setObjectName(\"MainForm\")\r\n        MainForm.resize(800, 600)\r\n        self.centralwidget = QtWidgets.QWidget(MainForm)\r\n        self.centralwidget.setObjectName(\"centralwidget\")\r\n        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)\r\n        self.horizontalLayout.setObjectName(\"horizontalLayout\")\r\n        self.Canvas = Draw(self.centralwidget)\r\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)\r\n        sizePolicy.setHorizontalStretch(0)\r\n        sizePolicy.setVerticalStretch(0)\r\n        sizePolicy.setHeightForWidth(self.Canvas.sizePolicy().hasHeightForWidth())\r\n        self.Canvas.setSizePolicy(sizePolicy)\r\n        self.Canvas.setObjectName(\"Canvas\")\r\n        self.horizontalLayout.addWidget(self.Canvas)\r\n        MainForm.setCentralWidget(self.centralwidget)\r\n        self.menubar = QtWidgets.QMenuBar(MainForm)\r\n        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 17))\r\n        self.menubar.setObjectName(\"menubar\")\r\n        self.menuFile = QtWidgets.QMenu(self.menubar)\r\n        self.menuFile.setObjectName(\"menuFile\")\r\n        self.menuDraw = QtWidgets.QMenu(self.menubar)\r\n        self.menuDraw.setObjectName(\"menuDraw\")\r\n        self.menuAnalyze = QtWidgets.QMenu(self.menubar)\r\n        self.menuAnalyze.setObjectName(\"menuAnalyze\")\r\n        MainForm.setMenuBar(self.menubar)\r\n        self.statusbar = QtWidgets.QStatusBar(MainForm)\r\n        self.statusbar.setObjectName(\"statusbar\")\r\n        MainForm.setStatusBar(self.statusbar)\r\n        self.toolBar = QtWidgets.QToolBar(MainForm)\r\n        self.toolBar.setObjectName(\"toolBar\")\r\n        MainForm.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolBar)\r\n        self.actionOpen = QtGui.QAction(MainForm)\r\n        icon = QtGui.QIcon()\r\n        icon.addPixmap(QtGui.QPixmap(\"icons/open_file.png\"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)\r\n        self.actionOpen.setIcon(icon)\r\n        self.actionOpen.setObjectName(\"actionOpen\")\r\n        self.actionExit = QtGui.QAction(MainForm)\r\n        icon1 = QtGui.QIcon()\r\n        icon1.addPixmap(QtGui.QPixmap(\"icons/exit.png\"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)\r\n        self.actionExit.setIcon(icon1)\r\n        self.actionExit.setObjectName(\"actionExit\")\r\n        self.actionPoint_Polygon = QtGui.QAction(MainForm)\r\n        self.actionPoint_Polygon.setCheckable(True)\r\n        self.actionPoint_Polygon.setChecked(False)\r\n        self.actionPoint_Polygon.setObjectName(\"actionPoint_Polygon\")\r\n        self.actionClear = QtGui.QAction(MainForm)\r\n        icon2 = QtGui.QIcon()\r\n        icon2.addPixmap(QtGui.QPixmap(\"icons/clear.png\"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)\r\n        self.actionClear.setIcon(icon2)\r\n        self.actionClear.setObjectName(\"actionClear\")\r\n\r\n        self.actionWindingNumber = QtGui.QAction(MainForm)\r\n        icon3 = QtGui.QIcon()\r\n        icon3.addPixmap(QtGui.QPixmap(\"icons/wn.png\"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)\r\n        self.actionWindingNumber.setIcon(icon3)\r\n        self.actionWindingNumber.setObjectName(\"actionWindingNumber\")\r\n\r\n        self.actionRayCrossing = QtGui.QAction(MainForm)\r\n        icon3 = QtGui.QIcon()\r\n        icon3.addPixmap(QtGui.QPixmap(\"icons/rc.png\"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)\r\n        self.actionRayCrossing.setIcon(icon3)\r\n        self.actionRayCrossing.setObjectName(\"actionRayCrossing\")\r\n\r\n        self.menuFile.addAction(self.actionOpen)\r\n        self.menuFile.addSeparator()\r\n        self.menuFile.addAction(self.actionExit)\r\n        self.menuDraw.addAction(self.actionPoint_Polygon)\r\n        self.menuDraw.addAction(self.actionClear)\r\n        self.menuAnalyze.addAction(self.actionRayCrossing)\r\n        self.menuAnalyze.addAction(self.actionWindingNumber)\r\n        self.menubar.addAction(self.menuFile.menuAction())\r\n        self.menubar.addAction(self.menuDraw.menuAction())\r\n        self.menubar.addAction(self.menuAnalyze.menuAction())\r\n        self.toolBar.addAction(self.actionOpen)\r\n        self.toolBar.addSeparator()\r\n        self.toolBar.addAction(self.actionRayCrossing)\r\n        self.toolBar.addAction(self.actionWindingNumber)\r\n        self.toolBar.addSeparator()\r\n        self.toolBar.addAction(self.actionClear)\r\n        self.toolBar.addSeparator()\r\n        self.toolBar.addAction(self.actionExit)\r\n\r\n        # Connect menu item and function\r\n        self.actionPoint_Polygon.triggered.connect(self.switchSourceClick)\r\n        self.actionRayCrossing.triggered.connect(self.analyzeClickR)\r\n        self.actionWindingNumber.triggered.connect(self.analyzeClickW)\r\n        self.actionOpen.triggered.connect(self.open)\r\n        self.actionExit.triggered.connect(self.exit)\r\n        self.actionClear.triggered.connect(self.clear)\r\n\r\n        self.retranslateUi(MainForm)\r\n        QtCore.QMetaObject.connectSlotsByName(MainForm)\r\n\r\n    def retranslateUi(self, MainForm):\r\n        _translate = QtCore.QCoreApplication.translate\r\n        MainForm.setWindowTitle(_translate(\"MainForm\", \"Point and polygon position\"))\r\n        self.menuFile.setTitle(_translate(\"MainForm\", \"File\"))\r\n        self.menuDraw.setTitle(_translate(\"MainForm\", \"Draw\"))\r\n        self.menuAnalyze.setTitle(_translate(\"MainForm\", \"Analyze\"))\r\n        self.toolBar.setWindowTitle(_translate(\"MainForm\", \"toolBar\"))\r\n        self.actionOpen.setText(_translate(\"MainForm\", \"Open\"))\r\n        self.actionExit.setText(_translate(\"MainForm\", \"Exit\"))\r\n        self.actionPoint_Polygon.setText(_translate(\"MainForm\", \"Point/Polygon\"))\r\n        self.actionClear.setText(_translate(\"MainForm\", \"Clear\"))\r\n        self.actionRayCrossing.setText(_translate(\"MainForm\", \"Ray crossing method\"))\r\n        self.actionRayCrossing.setShortcut(_translate(\"MainForm\", \"Ctrl+R\"))\r\n        self.actionWindingNumber.setText(_translate(\"MainForm\", \"Winding number method\"))\r\n        self.actionWindingNumber.setShortcut(_translate(\"MainForm\", \"Ctrl+W\"))\r\n\r\n\r\n\r\n    def switchSourceClick(self):\r\n        # Change source\r\n        self.Canvas.switchSource()\r\n\r\n    def analyzeClickR(self):\r\n        #Analyze point and position\r\n\r\n        #Get point and polygon\r\n        q = self.Canvas.getPoint()\r\n        a = Algorithms()\r\n        res = 0\r\n        pol = 0\r\n        border = False\r\n        corner = False\r\n\r\n        for p in range(57):\r\n            pol = self.Canvas.getPolygon(p)\r\n\r\n        #Analyze position\r\n\r\n            res = a.getPointPolygonPositionR(q, pol)\r\n            #print(\"ano\")\r\n\r\n            if res == 1:\r\n                self.Canvas.polsNew.append(pol)\r\n                self.Canvas.repaint()\r\n\r\n            if res == 2:\r\n                self.Canvas.polsNew.append(pol)\r\n                self.Canvas.repaint()\r\n                border = True\r\n\r\n            if res == 3:\r\n                self.Canvas.polsNew.append(pol)\r\n                self.Canvas.repaint()\r\n                corner = True\r\n\r\n        #Print results\r\n        if corner:\r\n            border = False\r\n            dialog = QtWidgets.QMessageBox()\r\n            dialog.setWindowTitle(\"Warning\")\r\n            dialog.setText(\"On the corner\")\r\n            dialog.exec()\r\n\r\n        if border:\r\n            dialog = QtWidgets.QMessageBox()\r\n            dialog.setWindowTitle(\"Warning\")\r\n            dialog.setText(\"On the border\")\r\n            dialog.exec()\r\n\r\n\r\n\r\n\r\n\r\n    def analyzeClickW(self):\r\n        #Analyze point and position\r\n\r\n        #Get point and polygon\r\n        q = self.Canvas.getPoint()\r\n        a = Algorithms()\r\n        res = 0\r\n        pol = 0\r\n        border = False\r\n        corner = False\r\n\r\n        for p in range(57):\r\n            pol = self.Canvas.getPolygon(p)\r\n\r\n        #Analyze position\r\n\r\n            res = a.getPointPolygonPositionW(q, pol)\r\n            #print(\"ano\")\r\n\r\n            if res == 1:\r\n                self.Canvas.polsNew.append(pol)\r\n                self.Canvas.repaint()\r\n\r\n            if res == 2:\r\n                self.Canvas.polsNew.append(pol)\r\n                self.Canvas.repaint()\r\n                border = True\r\n\r\n            if res == 3:\r\n                self.Canvas.polsNew.append(pol)\r\n                self.Canvas.repaint()\r\n                corner = True\r\n\r\n\r\n        # Print results\r\n        if corner:\r\n            border = False\r\n            dialog = QtWidgets.QMessageBox()\r\n            dialog.setWindowTitle(\"Warning\")\r\n            dialog.setText(\"On the corner\")\r\n            dialog.exec()\r\n\r\n        if border:\r\n            dialog = QtWidgets.QMessageBox()\r\n            dialog.setWindowTitle(\"Warning\")\r\n            dialog.setText(\"On the border\")\r\n            dialog.exec()\r\n\r\n        #Print results\r\n        #dialog = QtWidgets.QMessageBox()\r\n        #dialog.setWindowTitle(\"Result of analysis\")\r\n\r\n        #if res == 1:\r\n         #   dialog.setText(\"Inside\")\r\n        #else:\r\n         #   dialog.setText(\"Outside\")\r\n\r\n        #dialog.exec()\r\n\r\n    def open(self):\r\n        self.Canvas.input()\r\n\r\n    def exit(self):\r\n        quit()\r\n\r\n    def clear(self):\r\n        self.Canvas.polsNew = []\r\n        self.Canvas.repaint()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    import sys\r\n    app = QtWidgets.QApplication(sys.argv)\r\n    MainForm = QtWidgets.QMainWindow()\r\n    ui = Ui_MainForm()\r\n    ui.setupUi(MainForm)\r\n    MainForm.show()\r\n    sys.exit(app.exec())\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mainform.py b/mainform.py
--- a/mainform.py	(revision d8c849ba6a780478c75ca2c3be30430d4acb3d03)
+++ b/mainform.py	(date 1678479700155)
@@ -226,16 +226,7 @@
             dialog.setText("On the border")
             dialog.exec()
 
-        #Print results
-        #dialog = QtWidgets.QMessageBox()
-        #dialog.setWindowTitle("Result of analysis")
 
-        #if res == 1:
-         #   dialog.setText("Inside")
-        #else:
-         #   dialog.setText("Outside")
-
-        #dialog.exec()
 
     def open(self):
         self.Canvas.input()
Index: draw.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from load import Load\r\nfrom PyQt6.QtCore import *\r\nfrom PyQt6.QtGui import *\r\nfrom PyQt6.QtWidgets import *\r\n\r\nclass Draw(QWidget):\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        super().__init__(*args, **kwargs)\r\n\r\n        #Query point and polygon\r\n        self.__q = QPointF(0,0)\r\n        self.__pol = QPolygonF()\r\n\r\n        self.__pols = []\r\n        self.polsNew = []\r\n\r\n        self.__add_vertex = True\r\n\r\n    def mousePressEvent(self, e:QMouseEvent):\r\n        #Left mouse button click\r\n        x = e.position().x()\r\n        y = e.position().y()\r\n\r\n        #Add point to polygon\r\n        if self.__add_vertex:\r\n            #Create point\r\n            p = QPointF(x,y)\r\n\r\n            #Append p to polygon\r\n            self.__pol.append(p)\r\n\r\n        #Set x,y to point\r\n        else:\r\n            self.__q.setX(x)\r\n            self.__q.setY(y)\r\n\r\n        #Repaint screen\r\n        self.repaint()\r\n\r\n    def input(self):\r\n\r\n        pols = Load()\r\n        pols.readPol('TMMESTSKECASTI_P.shp')\r\n        #print('Ano')\r\n        for pl in range(57):\r\n            self.__pol.clear()\r\n            xy = pols.xy(pl)\r\n            #print(xy)\r\n            for i in range(len(xy)):\r\n                if self.__add_vertex:\r\n                    # Create point\r\n                    p = QPointF((xy[i].x() - 14) * 1000, 300 - (xy[i].y() - 50) * 1000)\r\n\r\n                    # Append p to polygon\r\n                    self.__pol.append(p)\r\n\r\n                # Set x,y to point\r\n                else:\r\n                    self.__q.setX(xy[i].x())\r\n                    self.__q.setY(xy[i].y())\r\n            self.__pols.append(QPolygonF(self.__pol))\r\n            #print(list(self.__pol))\r\n            self.repaint()\r\n\r\n    def paintEvent(self, e:QPaintEvent):\r\n        #Draw polygon\r\n\r\n        #Create graphic object\r\n        qp = QPainter(self)\r\n\r\n        #Start draw\r\n        qp.begin(self)\r\n\r\n        #Set attributes\r\n        qp.setPen(Qt.GlobalColor.red)\r\n        qp.setBrush(Qt.GlobalColor.yellow)\r\n\r\n        #Draw polygon\r\n        for p in range(len(self.__pols)):\r\n            qp.drawPolygon(self.__pols[p])\r\n\r\n        qp.setPen(Qt.GlobalColor.blue)\r\n        qp.setBrush(Qt.GlobalColor.green)\r\n\r\n        for p in range(len(self.polsNew)):\r\n            qp.drawPolygon(self.polsNew[p])\r\n\r\n        #Draw point\r\n        d = 1\r\n        qp.drawEllipse(int(self.__q.x() - d/2), int(self.__q.y() - d/2), d, d)\r\n\r\n        #End draw\r\n        qp.end()\r\n\r\n    def switchSource(self):\r\n        #Move point or add vertex\r\n        self.__add_vertex = not(self.__add_vertex)\r\n\r\n    def getPoint(self):\r\n        #Get point\r\n        return self.__q\r\n\r\n    def getPolygon(self, p):\r\n        #Get polygon\r\n        return self.__pols[p]\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/draw.py b/draw.py
--- a/draw.py	(revision d8c849ba6a780478c75ca2c3be30430d4acb3d03)
+++ b/draw.py	(date 1678564426001)
@@ -5,6 +5,7 @@
 
 class Draw(QWidget):
 
+
     def __init__(self, *args, **kwargs):
         super().__init__(*args, **kwargs)
 
@@ -42,11 +43,11 @@
 
         pols = Load()
         pols.readPol('TMMESTSKECASTI_P.shp')
-        #print('Ano')
+
         for pl in range(57):
             self.__pol.clear()
             xy = pols.xy(pl)
-            #print(xy)
+
             for i in range(len(xy)):
                 if self.__add_vertex:
                     # Create point
@@ -60,11 +61,10 @@
                     self.__q.setX(xy[i].x())
                     self.__q.setY(xy[i].y())
             self.__pols.append(QPolygonF(self.__pol))
-            #print(list(self.__pol))
+
             self.repaint()
 
     def paintEvent(self, e:QPaintEvent):
-        #Draw polygon
 
         #Create graphic object
         qp = QPainter(self)
@@ -87,7 +87,7 @@
             qp.drawPolygon(self.polsNew[p])
 
         #Draw point
-        d = 1
+        d = 3
         qp.drawEllipse(int(self.__q.x() - d/2), int(self.__q.y() - d/2), d, d)
 
         #End draw
Index: algorithms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import numpy as np\r\nfrom PyQt6.QtGui import *\r\nfrom PyQt6.QtCore import *\r\nfrom PyQt6.QtWidgets import *\r\n\r\nclass Algorithms:\r\n\r\n    def __init__(self):\r\n        pass\r\n\r\n    def getPointPolygonPositionR(self, q, pol):\r\n        kr = 0  # pocet pruseciku paprsku a hran na prave strane\r\n        kl = 0  # leva strana\r\n        n = len(pol)\r\n\r\n        # proces all vertices\r\n        for i in range(n):\r\n            #reduce coordinate - pocatek sourad systemu posunu do bodu q\r\n            xir = pol[i].x() - q.x()\r\n            yir = pol[i].y() - q.y()\r\n            xi1r = pol[(i+1)%n].x() - q.x()\r\n            yi1r = pol[(i+1)%n].y() - q.y()\r\n\r\n            #is on the corner\r\n            if xir == 0 and yir == 0:\r\n                return 3\r\n\r\n            #Suitable segment\r\n            if (yi1r > 0) and (yir <= 0) or (yir > 0) and (yi1r <= 0):  # lezi mezi y-sourad\r\n\r\n                #compute intersection\r\n                xm = (xi1r * yir - xir * yi1r) / (yi1r - yir)\r\n\r\n                #print(xm)\r\n                # increment amount of intersections\r\n                if xm > 0:\r\n                    kr += 1\r\n                elif xm < 0:\r\n                    kl += 1\r\n                elif xm == 0:\r\n                    return 2\r\n        #same amount of intersections on left and right\r\n        if kr % 2 == 1:\r\n                return 1\r\n        #point is on the border\r\n\r\n        return 0\r\n\r\n    def getPointPolygonPositionW(self, q, pol):\r\n\r\n        n = len(pol)\r\n        uhel = 0\r\n        # print(pol[0].x())\r\n\r\n        for i in range(n - 1):\r\n\r\n            xir = pol[i].x() - q.x()\r\n            yir = pol[i].y() - q.y()\r\n            xi1r = pol[(i + 1) % n].x() - q.x()\r\n            yi1r = pol[(i + 1) % n].y() - q.y()\r\n\r\n            if xir == 0 and yir == 0:\r\n                return 3\r\n\r\n            xm = (xi1r * yir - xir * yi1r) / (yi1r - yir)\r\n\r\n            scalar = xir * xi1r + yir * yi1r\r\n\r\n            length = (xir ** 2 + yir ** 2) ** (1 / 2) * (xi1r ** 2 + yi1r ** 2) ** (1 / 2)\r\n\r\n            fi = np.arccos(scalar / length)\r\n\r\n            if fi > 3.14:\r\n                return 2\r\n\r\n            if pol[i].y() > pol[(i + 1) % n].y():  # orientace hrany je nahoru\r\n                if xm > 0:  # bod je nalevo od hrany ve smeru orientace (+)\r\n                    uhel += fi\r\n                elif xm < 0:  # bod je napravo od hrany (-)\r\n                    uhel -= fi\r\n\r\n            elif pol[i].y() < pol[(i + 1) % n].y():  # orientace hrany je dolu\r\n                if xm < 0:  # bod je nalevo od hrany (+)\r\n                    uhel += fi\r\n                elif xm > 0:  # bod je napravo od hrany (-)\r\n                    uhel -= fi\r\n\r\n        if uhel > 6.2:\r\n            return 1\r\n\r\n        return 0
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithms.py b/algorithms.py
--- a/algorithms.py	(revision d8c849ba6a780478c75ca2c3be30430d4acb3d03)
+++ b/algorithms.py	(date 1678564567637)
@@ -13,9 +13,9 @@
         kl = 0  # leva strana
         n = len(pol)
 
-        # proces all vertices
+        # process all vertices
         for i in range(n):
-            #reduce coordinate - pocatek sourad systemu posunu do bodu q
+            #reduce coordinate
             xir = pol[i].x() - q.x()
             yir = pol[i].y() - q.y()
             xi1r = pol[(i+1)%n].x() - q.x()
@@ -31,7 +31,6 @@
                 #compute intersection
                 xm = (xi1r * yir - xir * yi1r) / (yi1r - yir)
 
-                #print(xm)
                 # increment amount of intersections
                 if xm > 0:
                     kr += 1
@@ -50,7 +49,6 @@
 
         n = len(pol)
         uhel = 0
-        # print(pol[0].x())
 
         for i in range(n - 1):
 
Index: .idea/PointInPolygon.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\" />\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.11\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/PointInPolygon.iml b/.idea/PointInPolygon.iml
--- a/.idea/PointInPolygon.iml	(revision d8c849ba6a780478c75ca2c3be30430d4acb3d03)
+++ b/.idea/PointInPolygon.iml	(date 1678273215942)
@@ -2,7 +2,7 @@
 <module type="PYTHON_MODULE" version="4">
   <component name="NewModuleRootManager">
     <content url="file://$MODULE_DIR$" />
-    <orderEntry type="jdk" jdkName="Python 3.11" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.10" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
 </module>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.11\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision d8c849ba6a780478c75ca2c3be30430d4acb3d03)
+++ b/.idea/misc.xml	(date 1678273216037)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.11" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.10" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
